{"version":3,"sources":["components/Frase.jsx","App.js","index.js"],"names":["useStyles","makeStyles","fraseContainer","padding","backgroundColor","borderRadius","maxWidth","marginTop","marginLeft","marginRight","position","fraseStyles","content","fontFamily","fontSize","color","left","top","Frase","frase","classes","fraseClass","className","quote","author","buttonStyles","background","backgroundSize","marginBottom","border","textTransform","transition","generalContainer","display","flexDirection","alignItems","justifyContent","App","useState","guardarFrase","useEffect","consultarAPI","a","fetch","api","json","data","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6PAIMA,EAAYC,YAAW,CAC3BC,eAAgB,CACdC,QAAS,OACTC,gBAAiB,QACjBC,aAAc,OACdC,SAAU,QACVC,UAAW,QACXC,WAAY,OACZC,YAAa,OACbC,SAAU,YAEZC,YAAa,CACX,YAAa,CACXC,QAAS,aACTC,WAAY,aACZC,SAAU,QACVC,MAAO,QACPL,SAAU,WACVM,KAAK,OACLC,IAAI,YAqBKC,EAjBD,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACTC,EAAUpB,IACVqB,EAAa,QAAUD,EAAQT,YAErC,OACE,qBAAKW,UAAWF,EAAQlB,eAAxB,SACE,6BAAYoB,UAAU,yBAAtB,UACE,mBAAGA,UAAWD,EAAd,SAA0B,iCAASF,EAAMI,UACzC,wBAAQD,UAAU,+BAAlB,SAAkDH,EAAMK,eC9B1DxB,EAAYC,YAAW,CAC3BwB,aAAc,CACZC,WACE,mEACFC,eAAgB,QAChBd,WAAY,SACZE,MAAO,OACPR,UAAW,OACXqB,aAAa,OACbzB,QAAS,YACTW,SAAU,SACVe,OAAQ,kBACRC,cAAe,YACfC,WAAY,2BAEZ,UAAW,CACTJ,eAAe,UAGnBK,iBAAiB,CACfC,QAAS,OACTC,cAAe,SACfC,WAAY,SACZC,eAAgB,YAgCLC,MA5Bf,WACE,IAAMjB,EAAUpB,IADH,EAEiBsC,mBAAS,IAF1B,mBAENnB,EAFM,KAECoB,EAFD,KAMbC,qBAAU,WACRC,MACA,IACF,IAAMA,EAAY,uCAAG,gCAAAC,EAAA,sEACDC,MAAM,uDADL,cACbC,EADa,gBAEAA,EAAIC,OAFJ,OAEbC,EAFa,OAGb3B,EAAQ2B,EAAK,GACnBP,EAAapB,GAJM,2CAAH,qDAMlB,OACE,sBAAKG,UAAWF,EAAQY,iBAAxB,UACE,cAAC,EAAD,CACAb,MAAOA,IAEP,wBACAG,UAAWF,EAAQK,aACnBsB,QAASN,EAFT,+BC/CNO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.100bd914.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport PropTypes from 'prop-types'\r\nconst useStyles = makeStyles({\r\n  fraseContainer: {\r\n    padding: \"3rem\",\r\n    backgroundColor: \"white\",\r\n    borderRadius: \"10px\",\r\n    maxWidth: \"800px\",\r\n    marginTop: \"10rem\",\r\n    marginLeft: \"1rem\",\r\n    marginRight: \"1rem\",\r\n    position: \"relative\"\r\n  },\r\n  fraseStyles: {\r\n    \"&::before\": {\r\n      content: \"open-quote\",\r\n      fontFamily: 'sans-serif',\r\n      fontSize: \"10rem\",\r\n      color: \"black\",\r\n      position: \"absolute\",\r\n      left:\"-3px\",\r\n      top:\"-2rem\"\r\n    },\r\n  },\r\n});\r\nconst Frase = ({ frase }) => {\r\n  const classes = useStyles();\r\n  const fraseClass = \"mb-0 \" + classes.fraseStyles;\r\n\r\n  return (\r\n    <div className={classes.fraseContainer}>\r\n      <blockquote className=\"blockquote text-center\">\r\n        <p className={fraseClass}><strong>{frase.quote}</strong></p>\r\n        <footer className=\"blockquote-footer text-right\">{frase.author}</footer>\r\n      </blockquote>\r\n    </div>\r\n  );\r\n};\r\n\r\nFrase.propTypes = {\r\n    frase: PropTypes.object.isRequired\r\n}\r\nexport default Frase;\r\n","import React, { useState, useEffect } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport Frase from \"./components/Frase\";\n\nconst useStyles = makeStyles({\n  buttonStyles: {\n    background:\n      \"linear-gradient(top left, #007d35 0%, #007d35 40%, #0f574e 100%)\",\n    backgroundSize: \"400px\",\n    fontFamily: \"Roboto\",\n    color: \"#fff\",\n    marginTop: \"3rem\",\n    marginBottom:\"1rem\",\n    padding: \"1rem 3rem\",\n    fontSize: \"1.5rem\",\n    border: \"2px solid black\",\n    textTransform: \"uppercase\",\n    transition: \"background-size .5s ease\",\n\n    \"&:hover\": {\n      backgroundSize:\"280px\"\n    },\n  },\n  generalContainer:{\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});\n\nfunction App() {\n  const classes = useStyles();\n  const [frase, guardarFrase] = useState({})\n  \n\n  // Cargar una frase\n  useEffect(()=>{\n    consultarAPI()\n  },[])\n  const consultarAPI = async () => {\n    const api = await fetch(\"https://breaking-bad-quotes.herokuapp.com/v1/quotes\")\n    const data = await api.json()\n    const frase = data[0]\n    guardarFrase(frase)\n  }\n  return (\n    <div className={classes.generalContainer}>\n      <Frase \n      frase={frase}\n      />\n      <button \n      className={classes.buttonStyles}\n      onClick={consultarAPI}\n      >Obtener Frase</button>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}